#version 430 core

#define MAX_LIGHTS_PER_TILE 1024
#define TILE_SIZE 16
#define SCREEN_WIDTH 1920
#define SCREEN_HEIGHT 1080

struct PointLight {
	vec4 position;
	vec4 diffuse;
	float radius;
	float intensity;
};

struct DirectionalLight {
	vec4 direction;
	vec4 diffuse;
	float intensity;
};

layout (std140) uniform perFrameUniforms
{
	mat4 projectionMatrix;
	mat4 viewMatrix;
	mat4 inverseProjectionMatrix;
	mat4 inverseViewMatrix;
	mat4 lightSpaceMatrix;
	DirectionalLight directionalLight;
	PointLight pointLights[10];
	vec4 cameraPosition;
	int pointLightCount;
};

uniform sampler2D depthMap;

layout(std430, binding = 3) writeonly buffer visible_lights_indices {
	int lights_indices[];
};

layout(std430, binding = 4) writeonly buffer debug_depth_buffer {
	float depth_buffer[];
};

shared uint minDepthInt;
shared uint maxDepthInt;
shared uint group_light_count;
shared vec4 frustumPlanes[6];
// Shared local storage for visible indices, will be written out to the global buffer at the end
shared int visibleLightIndices[MAX_LIGHTS_PER_TILE];

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main(){
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);

	if (gl_LocalInvocationIndex == 0) {
		minDepthInt = 0xFFFFFFFF;
		maxDepthInt = 0;
		group_light_count = 0;
		uint index = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
		uint offset = index * MAX_LIGHTS_PER_TILE;
		for (uint i = 0; i < MAX_LIGHTS_PER_TILE; i++) {
			lights_indices[offset + i] = -1;
		}
	}

	vec2 screenSize = vec2(SCREEN_WIDTH, SCREEN_HEIGHT);

	barrier();

	vec2 text = vec2(location) / screenSize;
	float depth = texture(depthMap, text).r;

	// Linearize the depth value from depth buffer (must do this because we created it using projection)
	depth = (0.5 * projectionMatrix[3][2]) / (depth + 0.5 * projectionMatrix[2][2] - 0.5);

	uint depthInt = floatBitsToUint(depth);
	atomicMin(minDepthInt, depthInt);
	atomicMax(maxDepthInt, depthInt);

	barrier();

	if (gl_LocalInvocationIndex == 0) {
		float minDepth = uintBitsToFloat(minDepthInt);
		float maxDepth = uintBitsToFloat(maxDepthInt);

		uint index = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
		depth_buffer[index] = maxDepth;

		vec4 vs_min_depth = (inverseProjectionMatrix * vec4(0.0, 0.0, (2.0 * minDepth - 1.0), 1.0));
		vec4 vs_max_depth = (inverseProjectionMatrix * vec4(0.0, 0.0, (2.0 * maxDepth - 1.0), 1.0));
		vs_min_depth /= vs_min_depth.w;
		vs_max_depth /= vs_max_depth.w;
		minDepth = vs_min_depth.z;
		maxDepth = vs_max_depth.z;

		vec2 tileScale = screenSize * (1.0f / float(2*TILE_SIZE));
		vec2 tileBias = tileScale - vec2(gl_WorkGroupID.xy);

		vec4 col1 = vec4(-projectionMatrix[0][0]  * tileScale.x, projectionMatrix[0][1], tileBias.x, projectionMatrix[0][3]); 
	    vec4 col2 = vec4(projectionMatrix[1][0], -projectionMatrix[1][1] * tileScale.y, tileBias.y, projectionMatrix[1][3]);
        vec4 col4 = vec4(projectionMatrix[3][0], projectionMatrix[3][1],  -1.0f, projectionMatrix[3][3]); 

		//left plane
		frustumPlanes[0] = col4 + col1;
		//right plane
		frustumPlanes[1] = col4 - col1;
		//top plane
		frustumPlanes[2] = col4 - col2;
		//bottom plane
		frustumPlanes[3] = col4 + col2;
		//near
		frustumPlanes[4] =vec4(0.0f, 0.0f, -1.0f,  -minDepth);
		//far
		frustumPlanes[5] = vec4(0.0f, 0.0f, -1.0f,  maxDepth);

		for(int i = 0; i < 4; i++) {
			frustumPlanes[i] *= 1.0f / length(frustumPlanes[i].xyz);
		}

	}

	barrier();


	// Step 3: Cull lights.
	// Parallelize the threads against the lights now.
	// Can handle 256 simultaniously. Anymore lights than that and additional passes are performed
	uint threadCount = TILE_SIZE * TILE_SIZE;
	uint passCount = (pointLightCount + threadCount - 1) / threadCount;
	for (uint i = 0; i < passCount; i++) {

		uint lightIndex = i * threadCount + gl_LocalInvocationIndex;
		if (lightIndex >= pointLightCount) {
			break;
		}

		PointLight p = pointLights[lightIndex];
		vec4 position = viewMatrix * p.position;

		if(group_light_count < MAX_LIGHTS_PER_TILE) {
			bool inFrustum = true;
			for (uint j = 0; j < 6 && inFrustum; j++) {
				float d = dot(frustumPlanes[j], position);
				// why negate here
				inFrustum = (d >= -p.radius);
			}
			if (inFrustum) {
				uint id = atomicAdd(group_light_count, 1);
				visibleLightIndices[id] = int(lightIndex);
			}
		}
	}

	barrier();

	if (gl_LocalInvocationIndex == 0) {
		uint tileIndex = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
		uint offset = tileIndex * MAX_LIGHTS_PER_TILE;
		for (uint i = 0; i < group_light_count; i++) {
			lights_indices[offset + i] = visibleLightIndices[i];
		}
	}

}         